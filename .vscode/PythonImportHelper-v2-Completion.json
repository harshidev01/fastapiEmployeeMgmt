[
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AddEmployee",
        "importPath": "models.userModels",
        "description": "models.userModels",
        "isExtraImport": true,
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "EmployeeBankDetails",
        "importPath": "models.userModels",
        "description": "models.userModels",
        "isExtraImport": true,
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "EmployeeFamilyDetails",
        "importPath": "models.userModels",
        "description": "models.userModels",
        "isExtraImport": true,
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "UpdateEmployee",
        "importPath": "models.userModels",
        "description": "models.userModels",
        "isExtraImport": true,
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "db.Db",
        "description": "db.Db",
        "isExtraImport": true,
        "detail": "db.Db",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "db.Db",
        "description": "db.Db",
        "peekOfCode": "client = MongoClient(\"mongodb://localhost:27017/\")\ndatabase = client.user_management",
        "detail": "db.Db",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "db.Db",
        "description": "db.Db",
        "peekOfCode": "database = client.user_management",
        "detail": "db.Db",
        "documentation": {}
    },
    {
        "label": "AddEmployee",
        "kind": 6,
        "importPath": "models.userModels",
        "description": "models.userModels",
        "peekOfCode": "class AddEmployee(BaseModel):\n    firstName:str\n    lastName:str\n    email:str\n    age:int\n    desig:str\n    team:str\nclass UpdateEmployee(BaseModel):\n    email:str\n    team:str",
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "UpdateEmployee",
        "kind": 6,
        "importPath": "models.userModels",
        "description": "models.userModels",
        "peekOfCode": "class UpdateEmployee(BaseModel):\n    email:str\n    team:str\nclass EmployeeFamilyDetails(BaseModel):\n    employeeName:str\n    fatherName:str\n    motherName:str\n    email:str\n    address:str\n    phNo:int",
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "EmployeeFamilyDetails",
        "kind": 6,
        "importPath": "models.userModels",
        "description": "models.userModels",
        "peekOfCode": "class EmployeeFamilyDetails(BaseModel):\n    employeeName:str\n    fatherName:str\n    motherName:str\n    email:str\n    address:str\n    phNo:int\nclass EmployeeBankDetails(BaseModel):\n    name:str\n    acNo:int",
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "EmployeeBankDetails",
        "kind": 6,
        "importPath": "models.userModels",
        "description": "models.userModels",
        "peekOfCode": "class EmployeeBankDetails(BaseModel):\n    name:str\n    acNo:int\n    ifscCode:str\n    branch:str\n    email:str",
        "detail": "models.userModels",
        "documentation": {}
    },
    {
        "label": "healthCheck",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def healthCheck():\n    return{\"message\":\"sucessful\"}\n@app.post(\"/addemployee\")\ndef addEmployee(employee:AddEmployee):\n    employeeCollection = database.Employee\n    employeeCollection.insert_one(document=employee.dict())\n    return employee\n@app.get(\"/getemployee\")\ndef getEmployee():\n    employeeCollection = database.Employee",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "addEmployee",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def addEmployee(employee:AddEmployee):\n    employeeCollection = database.Employee\n    employeeCollection.insert_one(document=employee.dict())\n    return employee\n@app.get(\"/getemployee\")\ndef getEmployee():\n    employeeCollection = database.Employee\n    allemployee= employeeCollection.find()\n    temp = []\n    for employee in allemployee:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "getEmployee",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def getEmployee():\n    employeeCollection = database.Employee\n    allemployee= employeeCollection.find()\n    temp = []\n    for employee in allemployee:\n        employee[\"_id\"] = str(employee[\"_id\"])\n        temp.append(employee)\n    return {\"data\":temp} \n@app.get(\"/getEmployee/{userEmail}\")\ndef getEmployee(userEmail:str):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "getEmployee",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def getEmployee(userEmail:str):\n    employeeCollection = database.Employee\n    oneemployee = employeeCollection.find_one({\"email\":userEmail})\n    oneemployee[\"_id\"] = str(oneemployee[\"_id\"])\n    return {\"data\":oneemployee}\n@app.post(\"/updateEmployee\")\ndef updateEmployee(employee:UpdateEmployee):\n    employeeCollection = database.Employee\n    updateone = employeeCollection.update_one({\"email\":employee.email},{\"$set\":{\"team\":employee.team}})\n    if updateone.matched_count == 0:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "updateEmployee",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def updateEmployee(employee:UpdateEmployee):\n    employeeCollection = database.Employee\n    updateone = employeeCollection.update_one({\"email\":employee.email},{\"$set\":{\"team\":employee.team}})\n    if updateone.matched_count == 0:\n        return {\"message\":\"not found\"}\n    else:\n        return{\"message\":\"sucessful\"}\n@app.delete(\"/deleteEmployee/{employee_id}\")\ndef deleteEmployee(employee_id:str):\n    employeeCollection = database.Employee",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "deleteEmployee",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def deleteEmployee(employee_id:str):\n    employeeCollection = database.Employee\n    status = employeeCollection.delete_one({\"_id\":ObjectId(employee_id)})\n    if status.deleted_count == 0:\n        return{\"message\":\"employee not found\"}\n    else:\n        return{\"message\":\"deleted\"}\n@app.post(\"/addEmployeeFamilyDetails\")\ndef addEmployeefamilyDetails(familyDetails:EmployeeFamilyDetails):\n    employeeFamilyDetailsCollection = database.EmployeeFamilyDetails",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "addEmployeefamilyDetails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def addEmployeefamilyDetails(familyDetails:EmployeeFamilyDetails):\n    employeeFamilyDetailsCollection = database.EmployeeFamilyDetails\n    employeeFamilyDetailsCollection.insert_one(document=familyDetails.dict())\n    return familyDetails\n@app.delete(\"/deleteFamilyDetails/{employee_Name}\")\ndef deleteFamilyDetails(employee_Name:str):\n    employeeFamilyDetailsCollection = database.EmployeeFamilyDetails\n    status = employeeFamilyDetailsCollection.delete_one({\"employeeName\":employee_Name})\n    if status.deleted_count == 0:\n        return{\"message\":\"employee not found\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "deleteFamilyDetails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def deleteFamilyDetails(employee_Name:str):\n    employeeFamilyDetailsCollection = database.EmployeeFamilyDetails\n    status = employeeFamilyDetailsCollection.delete_one({\"employeeName\":employee_Name})\n    if status.deleted_count == 0:\n        return{\"message\":\"employee not found\"}\n    else:\n        return{\"message\":\"deleted\"}\n@app.post(\"/EmployeeBankDetails\")\ndef employeeBankDetails(bankDetails: EmployeeBankDetails):\n    employeeBankDetailsCollections = database.EmployeeBankDetails",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "employeeBankDetails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def employeeBankDetails(bankDetails: EmployeeBankDetails):\n    employeeBankDetailsCollections = database.EmployeeBankDetails\n    employeeBankDetailsCollections.insert_one(document=bankDetails.dict())\n    return bankDetails\n@app.delete(\"/deleteBankDetails/{employeeName}\")\ndef deleteBankDetails(employeeName:str):\n    employeeBankDetailsCollections = database.EmployeeBankDetails\n    status = employeeBankDetailsCollections.delete_one({\"name\":employeeName})\n    if status.deleted_count == 0:\n        return{\"message\":\"employee not found\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "deleteBankDetails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def deleteBankDetails(employeeName:str):\n    employeeBankDetailsCollections = database.EmployeeBankDetails\n    status = employeeBankDetailsCollections.delete_one({\"name\":employeeName})\n    if status.deleted_count == 0:\n        return{\"message\":\"employee not found\"}\n    else:\n        return{\"message\":\"deleted\"}\n@app.get(\"/allEmployeeDetails/{employeeEmail}\")\ndef allEmployeeDetails(employeeEmail:str):\n    employeeCollection = database.Employee",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "allEmployeeDetails",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def allEmployeeDetails(employeeEmail:str):\n    employeeCollection = database.Employee\n    employeeFamilyDetailsCollection = database.EmployeeFamilyDetails\n    employeeBankDetailsCollection = database.EmployeeBankDetailsCollection\n    def clean(doc):\n        if doc and \"_id\" in doc:\n            doc[\"_id\"]= str(doc[\"_id\"])\n        return doc   \n    employee = employeeCollection.find_one({\"email\":employeeEmail})\n    family = employeeCollection.find_one({\"email\":employeeEmail})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/health\")\ndef healthCheck():\n    return{\"message\":\"sucessful\"}\n@app.post(\"/addemployee\")\ndef addEmployee(employee:AddEmployee):\n    employeeCollection = database.Employee\n    employeeCollection.insert_one(document=employee.dict())\n    return employee\n@app.get(\"/getemployee\")",
        "detail": "main",
        "documentation": {}
    }
]